///////////////////////////////////////////////////////////////////
//
// Служебный класс генерации документации в формате html
//
///////////////////////////////////////////////////////////////////

Перем ПустыеШаблоны;
Перем Шаблоны;

Перем КаталогПубликацииДокументации;
Перем АнализироватьТолькоПотомковПодсистемы;

///////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЙ ИНТЕРФЕЙС
///////////////////////////////////////////////////////////////////

// Генерирует структуру документации и проверяет на валидность в процессе генерации
//
// Параметры:
//	НастройкиГенератора - Структура - набор параметров, собранных в результате парсинга конфигурации
//		* ОписаниеКонфигурации
//		* ПодсистемыКонфигурации
//		* ОписаниеКонстант
//		* НастройкиАнализаИзменений
//
// Возвращаемое значение:
//	Структура - описание структуры сгенерированой документации
//		* ОшибкиГенерации - строка - обязательное поле, содержащее описание полученных ошибок
Функция Сгенерировать(НастройкиГенератора) Экспорт

	СоздаваемыеСтраницы = Новый ТаблицаЗначений;
	СоздаваемыеСтраницы.Колонки.Добавить("ИмяСтраницы");
	СоздаваемыеСтраницы.Колонки.Добавить("Родитель");
	СоздаваемыеСтраницы.Колонки.Добавить("Содержимое");
	СоздаваемыеСтраницы.Колонки.Добавить("ПутьККаталогу");
	
	СоздаваемыеРазделы = СоздаваемыеСтраницы.Скопировать();
	СоздаваемыеРазделы.Колонки.Удалить("Содержимое");
	ОшибкиГенерации = "";
	ПарсерКонфигурации = ОбщегоНазначения.ПолучитьПарсерКонфигурации();
	
	Для Каждого Модуль Из НастройкиГенератора.ОписаниеКонфигурации.МодулиКонфигурации Цикл
		
		Если НЕ НастройкиГенератора.НастройкиАнализаИзменений.Анализировать 
				ИЛИ НастройкиГенератора.НастройкиАнализаИзменений.ИзмененныеФайлы.Найти(НРЕГ(Модуль.ПутьКФайлу)) <> Неопределено Тогда
			
			ОбщегоНазначения.ПолучитьПарсерКонфигурации(ПарсерКонфигурации).ПрочитатьСодержимоеМодуля(Модуль);
			
			ТекстОшибок = "";
			СодержимоеСтраницы = СформироватьТекстСтраницыПоОписанию(Модуль, ТекстОшибок, Шаблоны);
			
			Если НЕ ПустаяСтрока(ТекстОшибок) Тогда
				
				ОшибкиГенерации = ОшибкиГенерации + ?(ПустаяСтрока(ОшибкиГенерации), "", Символы.ПС)
						+ Модуль.ПутьКФайлу + ": " + ТекстОшибок;
				
				Продолжить;
				
			ИначеЕсли ПустаяСтрока(СодержимоеСтраницы) Тогда
				
				// Нет никто
				Продолжить;
				
			Иначе
				
				ИмяСтраницы = ОбщегоНазначения.ПолучитьПарсерКонфигурации(ПарсерКонфигурации).ПолноеИмяОбъекта(Модуль, ЛОЖЬ);
				Если Модуль.Родитель.Подсистемы = Неопределено Тогда
					
					ОшибкиГенерации = ОшибкиГенерации + ?(ПустаяСтрока(ОшибкиГенерации), "", Символы.ПС)
										+ Модуль.ПутьКФайлу + ": не включен в состав подсистем";
					Продолжить;
					
				КонецЕсли;
				
				СтруктураПодсистем = ПолучитьСтруктуруПодсистем(Модуль.Родитель.Подсистемы);
				Если ПустаяСтрока(СтруктураПодсистем.ИмяРаздела) Тогда
					
					ОшибкиГенерации = ОшибкиГенерации + ?(ПустаяСтрока(ОшибкиГенерации), "", Символы.ПС)
									+ Модуль.ПутьКФайлу + ": ошибочная структура подсистем";
					Продолжить;
					
				КонецЕсли;
				
				Раздел = СоздаваемыеРазделы.Найти(СтруктураПодсистем.ИмяРаздела, "ИмяСтраницы");
				Если Раздел = Неопределено Тогда
					
					Раздел = СоздаваемыеРазделы.Добавить();
					Раздел.ИмяСтраницы = СтруктураПодсистем.ИмяРаздела;
					
				КонецЕсли;
				
				ИмяПодсистемы = "Подсистема " + СтруктураПодсистем.ИмяПодсистемы;
				Если СтруктураПодсистем.ИмяПодсистемы = "Общего назначения" Тогда
					
					ИмяПодсистемы = ИмяПодсистемы + " (" + НРег(СтруктураПодсистем.ИмяРаздела) + ")";
					
				КонецЕсли;
				
				Подсистема = СоздаваемыеРазделы.Найти(ИмяПодсистемы, "ИмяСтраницы");
				Если Подсистема = Неопределено Тогда
					
					Подсистема = СоздаваемыеРазделы.Добавить();
					Подсистема.ИмяСтраницы = ИмяПодсистемы;
					Подсистема.Родитель = Раздел;
					
				КонецЕсли; 
				
				Страница = СоздаваемыеСтраницы.Добавить();
				Страница.ИмяСтраницы = "Программный интерфейс. " + ИмяСтраницы;
				Страница.Родитель = Подсистема;
				Страница.Содержимое = СодержимоеСтраницы;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОшибкиГенерацииКонстант = "";
	СодержимоеСтраницыКонстант = СформироватьТекстСтраницыКонстант(НастройкиГенератора.ОписаниеКонстант, ОшибкиГенерацииКонстант, НастройкиГенератора.ПодсистемыКонфигурации);
	Если НЕ ПустаяСтрока(ОшибкиГенерацииКонстант) Тогда
		
		ОшибкиГенерации = ОшибкиГенерации + ?(ПустаяСтрока(ОшибкиГенерации), "", Символы.ПС) + ОшибкиГенерацииКонстант;
		СодержимоеСтраницыКонстант = "";

	КонецЕсли;

	Возврат Новый Структура("СоздаваемыеСтраницы, СоздаваемыеРазделы, СодержимоеСтраницыКонстант, ОшибкиГенерации", СоздаваемыеСтраницы, СоздаваемыеРазделы, СодержимоеСтраницыКонстант, ОшибкиГенерации);

КонецФункции

// Выполняет публикацию документации
//
// Параметры:
//	РезультатГенерации - Структура - результат выполнения метода Сгенерировать
//	НастройкиГенератора - Структура - набор параметров, собранных в результате парсинга конфигурации. См Сгенерировать
//
// Возвращаемое значение:
//	Строка - Ошибки публикации
Функция Опубликовать(РезультатГенерации, НастройкиГенератора) Экспорт

	ОшибкиПубликации = "";
	
	РодительскийКаталог = Новый Файл(КаталогПубликацииДокументации);
	Если НЕ (РодительскийКаталог.Существует() И РодительскийКаталог.ЭтоКаталог()) Тогда 
		
		ОшибкиПубликации = "Отсутствует каталог размещения автодокументации: '" + РодительскийКаталог.ПолноеИмя + "'";

	Иначе

		РодительскийКаталогПуть = РодительскийКаталог.ПолноеИмя;
		Для Каждого РазделПодсистема Из РезультатГенерации.СоздаваемыеРазделы Цикл
			
			ПутьККаталогу = ОбъединитьПути(?(РазделПодсистема.Родитель = Неопределено, РодительскийКаталогПуть, РазделПодсистема.Родитель.ПутьККаталогу), РазделПодсистема.ИмяСтраницы);
			ФайлКаталога = Новый Файл(ПутьККаталогу);
			Если НЕ (ФайлКаталога.Существует() И ФайлКаталога.ЭтоКаталог()) Тогда
				
				Попытка
					
					СоздатьКаталог(ПутьККаталогу);

				Исключение
					
					ОшибкиПубликации = ОшибкиПубликации + ?(ПустаяСтрока(ОшибкиПубликации), "", Символы.ПС) 
										+ "Ошибка создания каталога '" + РазделПодсистема.ИмяСтраницы + "': " + ОписаниеОшибки();
										
					Продолжить;
					
				КонецПопытки;
				
			КонецЕсли;
			
			РазделПодсистема.ПутьККаталогу = ПутьККаталогу;

		КонецЦикла;
		
		Для Каждого НоваяСтраница Из РезультатГенерации.СоздаваемыеСтраницы Цикл
		
			Если НЕ ЗначениеЗаполнено(НоваяСтраница.Родитель.ПутьККаталогу) Тогда
				
				ОшибкиПубликации = ОшибкиПубликации + ?(ПустаяСтрока(ОшибкиПубликации), "", Символы.ПС) 
									+  "Создание страницы '" + НоваяСтраница.ИмяСтраницы + "' невозможно, т.к. не создан каталог подсистемы";
				
				Продолжить;
				
			КонецЕсли;
			
			Попытка
				
				ПутьКСтранице = ОбъединитьПути(НоваяСтраница.Родитель.ПутьККаталогу, НоваяСтраница.ИмяСтраницы) + ".html";
				ТекстовыйДокумент = Новый ТекстовыйДокумент();
				ТекстовыйДокумент.УстановитьТекст(СокрЛП(НоваяСтраница.Содержимое));
				ТекстовыйДокумент.Записать(ПутьКСтранице);
				
			Исключение
				
				ОшибкиПубликации = ОшибкиПубликации + ?(ПустаяСтрока(ОшибкиПубликации), "", Символы.ПС) 
									+ "Ошибка создания страницы '" + НоваяСтраница.ИмяСтраницы + "': " + ОписаниеОшибки();
				
			КонецПопытки;
			
		КонецЦикла;

		ТекстОшибок = "";
		
	
		Если НЕ ПустаяСтрока(РезультатГенерации.СодержимоеСтраницыКонстант) Тогда
			
			Попытка
				
				ПутьКСтранице = ОбъединитьПути(РодительскийКаталогПуть, "Константы") + ".html";
				ТекстовыйДокумент = Новый ТекстовыйДокумент();
				ТекстовыйДокумент.УстановитьТекст(СокрЛП(РезультатГенерации.СодержимоеСтраницыКонстант));
				ТекстовыйДокумент.Записать(ПутьКСтранице);				
				
			Исключение
				
				ОшибкиПубликации = ОшибкиПубликации + ?(ПустаяСтрока(ОшибкиПубликации), "", Символы.ПС) 
									+ "Ошибка создания страницы 'Константы': " + ОписаниеОшибки();
				
			КонецПопытки;
			
		КонецЕсли;

	КонецЕсли;
	
	Возврат ОшибкиПубликации;
	
КонецФункции

// Производит чтение настроект из конфигурационного файла и сохраяет их в свойствах объекта
//
// Параметры:
//	 НастройкиСтенда - Объект.НастройкиСтенда - Объект, содержащий информацию конфигурационного файла
//
// Возвращаемое значение:
//	Строка - описание возникших ошибок
Функция ПрочитатьНастройки(НастройкиСтенда) Экспорт
	
	ТекстОшибки = "";

	НастройкиHTML = НастройкиСтенда.Настройка("AutodocGen\НастройкиHTML");
	Если ЗначениеЗаполнено(НастройкиHTML) Тогда
		
		Шаблоны = ЗагрузитьШаблоны(НастройкиHTML["ПутьКШаблонам"]);
		КаталогПубликацииДокументации = НастройкиHTML["КаталогПубликации"];
		АнализироватьТолькоПотомковПодсистемы = Строка(НастройкиHTML["АнализироватьТолькоПотомковПодсистемы"]);

		Если НЕ ЗначениеЗаполнено(КаталогПубликацииДокументации) Тогда

			ТекстОшибки = "Некорректные настройки каталога публикации";
			
		КонецЕсли;
		
	Иначе

		ТекстОшибки = "Отсутствуют настройки";
		
	КонецЕсли;

	Возврат ТекстОшибки;
	
КонецФункции

Функция ЗагрузитьШаблоны(ПутьКШаблонам, ПустойШаблон = ЛОЖЬ)
	
	Если ПустойШаблон И ПустыеШаблоны <> Неопределено Тогда
		
		Возврат ПустыеШаблоны;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПутьКШаблонам) Тогда
		
		ПутьКШаблонам = ОбъединитьПути(СтартовыйСценарий().Каталог, "additional", "Шаблоны_HTML.json");
		
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ПутьКШаблонам, "UTF-8");
	СодержиоеШаблона = Текст.ПолучитьТекст();
	ПарсерJSON = Новый ПарсерJSON;
	ПредШаблоны = ПарсерJSON.ПрочитатьJSON(СодержиоеШаблона);
	Шаблоны = Новый Структура;
	Для Каждого Элемент Из ПредШаблоны Цикл
		
		Шаблоны.Вставить(Элемент.Ключ, СтрЗаменить(Элемент.Значение, """", "\"""));
		
	КонецЦикла;
	
	Если ПустойШаблон Тогда
		
		ПустыеШаблоны = Шаблоны;
		
	КонецЕсли;
	
	Возврат Шаблоны;
	
КонецФункции

Функция СформироватьТекстСтраницыПоОписанию(ОписаниеСтруктурыМодуля, ТекстОшибок, Шаблоны = Неопределено)
	
	Если ОписаниеСтруктурыМодуля.ТипМодуля <> ТипМодуля.ОбщийМодуль 
		И ОписаниеСтруктурыМодуля.ТипМодуля <> ТипМодуля.МодульМенеджера Тогда
		
		// Реализован анализ только для общих модулей и модулей менеджеров
		// остальные пропускаем
		Возврат "";
		
	КонецЕсли;
	
	НужныеРазделы = Неопределено;
	Если ОписаниеСтруктурыМодуля.ТипМодуля = ТипМодуля.ОбщийМодуль Тогда
		
		НужныеРазделы = ТипОбласти.РазделыОбщегоМодуля;
		
	ИначеЕсли ОписаниеСтруктурыМодуля.ТипМодуля = ТипМодуля.МодульМенеджера Тогда
		
		НужныеРазделы = ТипОбласти.РазделыМодуляМенеджера;
		
	КонецЕсли;
	
	Если ОписаниеСтруктурыМодуля.НаборБлоков.Количество() 
		И ОписаниеСтруктурыМодуля.ОписаниеМодуля.Разделы.Количество() <> НужныеРазделы.Количество() Тогда
		
		ТекстОшибки = "";
		Для Каждого ТекРаздел Из НужныеРазделы Цикл
			
			Если ОписаниеСтруктурыМодуля.ОписаниеМодуля.Разделы.Найти(ТекРаздел) = Неопределено Тогда
				
				ТекстОшибки = ТекстОшибки + Символы.ПС + " - отсутствует раздел " + ТекРаздел;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			
			ТекстОшибок = "В структуре модуля неполный состав разделов: " + ТекстОшибки;
			
		Иначе
			
			ТекстОшибок = "В структуре модуля присутсвуют дубли разделов";
			
		КонецЕсли;
		
		Возврат "";
		
	КонецЕсли;
	
	Текст = "";
	ТекущаяОбласть = "";
	ОбластьОткрыта = ЛОЖЬ;
	
	Для Каждого Блок Из ОписаниеСтруктурыМодуля.НаборБлоков Цикл
		
		ТекстМетода = "";
		Если Блок.ТипБлока = ТипБлоковМодуля.ЗаголовокПроцедуры
			ИЛИ Блок.ТипБлока = ТипБлоковМодуля.ЗаголовокФункции Тогда
			
			Если ПустаяСтрока(Блок.ОписаниеБлока.ИмяРаздела) Тогда
				
				ТекстОшибок = ТекстОшибок + СтрШаблон(?(ПустаяСтрока(ТекстОшибок), "", Символы.ПС) + "Метод '%1' находится вне раздела", Блок.ОписаниеБлока.ИмяМетода);
				Продолжить;
				
			КонецЕсли;
			
			Если НЕ Блок.ОписаниеБлока.Экспортный 
				И (Блок.ОписаниеБлока.ИмяРаздела = ТипОбласти.РазделПрограммныйИнтерфейс
				ИЛИ Блок.ОписаниеБлока.ИмяРаздела = ТипОбласти.РазделСлужебныйПрограммныйИнтерфейс)
				ИЛИ Блок.ОписаниеБлока.Экспортный 
				И НЕ (Блок.ОписаниеБлока.ИмяРаздела = ТипОбласти.РазделПрограммныйИнтерфейс
				ИЛИ Блок.ОписаниеБлока.ИмяРаздела = ТипОбласти.РазделСлужебныйПрограммныйИнтерфейс) Тогда
				
				ТекстОшибок = ТекстОшибок + СтрШаблон(?(ПустаяСтрока(ТекстОшибок), "", Символы.ПС) + "В разеделе %1 находится %3экспортный метод '%2'", Блок.ОписаниеБлока.ИмяРаздела, Блок.ОписаниеБлока.ИмяМетода, ?(Блок.ОписаниеБлока.Экспортный, "", "не"));
				Продолжить;
				
			КонецЕсли;
			
			Если Блок.ОписаниеБлока.ИмяРаздела = ТипОбласти.РазделПрограммныйИнтерфейс Тогда
				
				Если ТекущаяОбласть <> Блок.ОписаниеБлока.ИмяОбласти И ОбластьОткрыта Тогда 
					
					ТекстМетода = ТекстМетода + Шаблоны.ШаблонСплиттерКонец + " ";
					ОбластьОткрыта = ЛОЖЬ;
					ТекущаяОбласть = "";					
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Блок.ОписаниеБлока.ИмяОбласти) И НЕ ОбластьОткрыта Тогда				
					
					ОбластьОткрыта = ИСТИНА;
					ТекущаяОбласть = Блок.ОписаниеБлока.ИмяОбласти;
					ТекстМетода = ТекстМетода + СтрШаблон(Шаблоны.ШаблонСплиттерНачало, Блок.ОписаниеБлока.ИмяОбласти) + " ";
					
				КонецЕсли;
				
				ТекстМетода = ТекстМетода + СтрШаблон(Шаблоны.ШаблонЗаголовок, Блок.ОписаниеБлока.ИмяМетода);
				
				Если ЗначениеЗаполнено(Блок.ОписаниеБлока.Назначение) Тогда
					
					ТекстМетода = ТекстМетода + " "
					+ СтрШаблон(Шаблоны.ШаблонОписание, 
					ОбработатьСтроку(Блок.ОписаниеБлока.Назначение));
					
				Иначе
					
					ТекстОшибок = ТекстОшибок + СтрШаблон(?(ПустаяСтрока(ТекстОшибок), "", Символы.ПС) + "У метода '%1' не заполнено описание", Блок.ОписаниеБлока.ИмяМетода);
					
				КонецЕсли;
				
				Если Блок.ОписаниеБлока.ПараметрыМетода.Количество() Тогда
					
					ТекстМетода = ТекстМетода + " " + Шаблоны.ШаблонШапкаТЧ;
					
					Ит = 0;
					Для Каждого Параметр Из Блок.ОписаниеБлока.ПараметрыМетода Цикл
						
						Ит = Ит + 1;
						ТекстМетода = ТекстМетода + " "
						+ СтрШаблон(Шаблоны.ШаблонСтрокаТЧ, Ит, Параметр.Имя, ?(ЗначениеЗаполнено(Параметр.ЗначениеПоУмолчанию), "Нет", "Да"), Параметр.ТипПараметра, 
						ОбработатьСтроку(Параметр.ОписаниеПараметра));
						
						Если НЕ ЗначениеЗаполнено(Параметр.ОписаниеПараметра) Тогда
							
							ТекстОшибок = ТекстОшибок + СтрШаблон(?(ПустаяСтрока(ТекстОшибок), "", Символы.ПС) + "У метода '%1' не заполнено описание параметра %2", Блок.ОписаниеБлока.ИмяМетода, Ит);
							
						КонецЕсли;
						
					КонецЦикла;
					
					ТекстМетода = ТекстМетода + " " + Шаблоны.ШаблонПодвалТЧ;
					
				КонецЕсли;
				
				Если Блок.ТипБлока = ТипБлоковМодуля.ЗаголовокФункции Тогда
					
					ТекстМетода = ТекстМетода + " "
					+ СтрШаблон(Шаблоны.ШаблонВозврат, Блок.ОписаниеБлока.ТипВозвращаемогоЗначения, 
					ОбработатьСтроку(Блок.ОписаниеБлока.ОписаниеВозвращаемогоЗначения));						
					
					Если НЕ ЗначениеЗаполнено(Блок.ОписаниеБлока.ОписаниеВозвращаемогоЗначения) Тогда
						
						ТекстОшибок = ТекстОшибок + СтрШаблон(?(ПустаяСтрока(ТекстОшибок), "", Символы.ПС) + "У метода '%1' не заполнено описание возвращаемого значения", Блок.ОписаниеБлока.ИмяМетода);
						
					КонецЕсли;
					
				КонецЕсли;				
				
				Если Блок.ОписаниеБлока.Примеры.Количество() Тогда
					
					Для Каждого Пример Из Блок.ОписаниеБлока.Примеры Цикл
						
						ТекстМетода = ТекстМетода + " " + СтрШаблон(Шаблоны.ШаблонПример, ОбработатьСтроку(Пример, ИСТИНА));
						
					КонецЦикла;
					
				КонецЕсли;			
				
				Текст = Текст + " " + ТекстМетода;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбластьОткрыта Тогда
		
		Текст = Текст + Шаблоны.ШаблонСплиттерКонец + " ";
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(Текст) Тогда
		
		Текст = Шаблоны.ШаблонНачалоСтраницы + Текст + Шаблоны.ШаблонКонецСтраницы;
		
	КонецЕсли;

	Возврат Текст;
	
КонецФункции

Функция СформироватьТекстСтраницыКонстант(МассивОписанийКонстант, ТекстОшибок, ПодсистемыКонфигурации)
	
	ТекстМетода = "";
	МассивРодительскихПодсистем = Новый Массив;
	
	МассивПодсистем = ПолучитьМассивПодсистемИзОписания(МассивОписанийКонстант, МассивРодительскихПодсистем);
	
	Для Каждого Родитель Из МассивРодительскихПодсистем Цикл
		
		РодительПредставление = ПодсистемыКонфигурации.Найти(Родитель, "ПодсистемаИмяКратко");
		ТекстМетода = ТекстМетода + СтрШаблон(Шаблоны.ШаблонСплиттерНачало, РодительПредставление.ПодсистемаПредставлениеКратко);
		
		Потомки = ПолучитьПотомков(МассивПодсистем, Родитель);
		
		Для Каждого Подсистема Из Потомки Цикл
			
			ПодсистемаПредставление = ПодсистемыКонфигурации.Найти(Подсистема, "ПодсистемаИмяКратко");
			ТекстМетода = ТекстМетода + СтрШаблон(Шаблоны.ШаблонЗаголовокДляКонстант, ПодсистемаПредставление.ПодсистемаПредставлениеКратко) 
			+ Шаблоны.ШаблонШапкаТЧДляКонстант;
			
			Для Ит = 0 ПО МассивОписанийКонстант.Количество() - 1 Цикл
				
				Если СтрЗаканчиваетсяНа(МассивОписанийКонстант[Ит].Подсистема, Подсистема) 
					И СтрНайти(МассивОписанийКонстант[Ит].Подсистема, Родитель) Тогда
					
					Если ПустаяСтрока(МассивОписанийКонстант[Ит].Описание) Тогда
						
						ТекстОшибок = ТекстОшибок + ?(ПустаяСтрока(ТекстОшибок), "", Символы.ПС) +  МассивОписанийКонстант[Ит].Имя 
						+ ": Описание константы не заполнено.";
						
					Иначе
						
						ТекстМетода = ТекстМетода + " "
						+ СтрШаблон(Шаблоны.ШаблонСтрокаТЧДляКонстант, МассивОписанийКонстант[Ит].Имя,
						МассивОписанийКонстант[Ит].Тип, ОбработатьСтроку(МассивОписанийКонстант[Ит].Описание));
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ТекстМетода = ТекстМетода + " " + Шаблоны.ШаблонПодвалТЧ;
			
		КонецЦикла;
		
		ТекстМетода = ТекстМетода + СтрШаблон(Шаблоны.ШаблонСплиттерКонец);
		
	КонецЦикла;
	
	Возврат ТекстМетода;
	
КонецФункции

Функция ПолучитьСтруктуруПодсистем(Подсистемы)
	
	ИскомаяПодсистема = Неопределено;
	
	Для Каждого Подсистема Из Подсистемы Цикл
		
		Если Подсистема.Визуальная Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(АнализироватьТолькоПотомковПодсистемы) И Не СтрНачинаетсяС(Подсистема.ПодсистемаИмя, АнализироватьТолькоПотомковПодсистемы) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Имена = СтрРазделить(Подсистема.ПодсистемаПредставление, "/");
		Если Имена.Количество() <> 3 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ИскомаяПодсистема = Подсистема;
		Прервать;
		
	КонецЦикла;
	
	СтруктураПодсистем = Новый Структура("ИмяРаздела, ИмяПодсистемы, ОписаниеРаздела, ОписаниеПодсистемы", "", "", "", "");
	Если ИскомаяПодсистема <> Неопределено Тогда
		
		СтруктураПодсистем.ИмяРаздела = ИскомаяПодсистема.Родитель.ПодсистемаПредставлениеКратко;
		СтруктураПодсистем.ИмяПодсистемы = ИскомаяПодсистема.ПодсистемаПредставлениеКратко;  		
		СтруктураПодсистем.ОписаниеРаздела = ИскомаяПодсистема.Родитель.ПодсистемаОписание;
		СтруктураПодсистем.ОписаниеПодсистемы = ИскомаяПодсистема.ПодсистемаОписание;
		
	КонецЕсли;
	
	Возврат СтруктураПодсистем;
	
КонецФункции

Функция ОбработатьСтроку(Знач ВходнаяСтрока, ДляCDATA = Ложь)
	
	СимволыЗамены = Новый СписокЗначений;
	СимволыЗамены.Добавить("\", "\\");
	СимволыЗамены.Добавить("&", "&amp;");
	СимволыЗамены.Добавить("<", "&lt;");
	СимволыЗамены.Добавить(">", "&gt;");
	СимволыЗамены.Добавить(Символ(8211), "&ndash;");
	СимволыЗамены.Добавить(Символ(8212), "&mdash;");
	СимволыЗамены.Добавить(Символы.ПС, "<br/>");
	СимволыЗамены.Добавить(Символ(13), "<br/>");
	СимволыЗамены.Добавить(Символы.Таб, "    ");
	
	Если ДляCDATA Тогда
		
		СимволыЗамены.Добавить("""", "\""");
		
	Иначе
		
		СимволыЗамены.Добавить("""", "&quot;");
		
	КонецЕсли;
	
	Для Каждого СимволЗамены Из СимволыЗамены Цикл
		
		ВходнаяСтрока = СтрЗаменить(ВходнаяСтрока, СимволЗамены.Значение, СимволЗамены.Представление);
		
	КонецЦикла;
	
	Возврат ВходнаяСтрока; 
	
КонецФункции

Функция ПолучитьМассивПодсистемИзОписания(МассивОписанийКонстант, МассивРодительскихПодсистем)
	
	МассивПодсистем = Новый Массив;
	
	Для Каждого ОписаниеКонстанты Из МассивОписанийКонстант Цикл
		
		РазборПодсистемы = СтрРазделить(ОписаниеКонстанты.Подсистема, ".");
		Если РазборПодсистемы.Количество() < 2 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		МассивПодсистем.Добавить(ОписаниеКонстанты.Подсистема);
		
		Если МассивРодительскихПодсистем.Найти(РазборПодсистемы[1]) = Неопределено Тогда
			
			МассивРодительскихПодсистем.Добавить(РазборПодсистемы[1]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивПодсистем;
	
КонецФункции

Функция ПолучитьПотомков(МассивОписанийПодсистем, Родитель)
	
	МассивИменПодсистем = Новый Массив;
	
	Для Каждого ОписаниеПодсистема Из МассивОписанийПодсистем Цикл
		
		Если СтрНайти(ОписаниеПодсистема, Родитель) Тогда
			
			РазборПодсистемы = СтрРазделить(ОписаниеПодсистема, ".");
			
			Если РазборПодсистемы.Количество() = 3 Тогда
				
				Если МассивИменПодсистем.Найти(РазборПодсистемы[2]) = Неопределено Тогда
					
					МассивИменПодсистем.Добавить(РазборПодсистемы[2]);
					
				КонецЕсли;
				
			ИначеЕсли РазборПодсистемы.Количество() = 2 Тогда
				
				Если МассивИменПодсистем.Найти(РазборПодсистемы[1]) = Неопределено Тогда
					
					МассивИменПодсистем.Добавить(РазборПодсистемы[1]);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивИменПодсистем;
	
КонецФункции
